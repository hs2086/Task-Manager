@using ToDoApp.Models
@model List<TaskItem>
@{
    ViewData["Title"] = "Home Page";
}

<div class="container">
    <div class="text-center">
        <h1 class="display-4">Welcome @User?.Identity?.Name</h1>
        <br>
        
        @if(Model.Count == 0)
        {
            <div class="empty-state">
                <h2>You don't have any tasks yet</h2>
                <p class="lead">Let's create your first task!</p>
                <br>
                <a class="btn btn-primary btn-lg" href="/Home/AddTask">
                    <i class="fas fa-plus"></i> Add Task
                </a>
            </div>
        }
        else
        {
            <div class="task-header">
                <h2>Your Tasks</h2>
                <a class="btn btn-primary" href="/Home/AddTask">
                    <i class="fas fa-plus"></i> Add New
                </a>
            </div>
            
            <div class="task-list">
                @foreach (var task in Model)
                {
                    <div class="task-card @(task.IsCompleted ? "completed" : "")">
                        <div class="task-main">
                            <h3 class="task-title">@task.Title</h3>
                            @if (!string.IsNullOrEmpty(task.Description))
                            {
                                <p class="task-description">
                                    @if(task.Description.Length > 45){
                                        @task.Description.Substring(0, 45)
                                        <span>...</span>
                                    }
                                    else{
                                        @task.Description
                                    }
                                </p>
                            }
                        </div>
                        
                        <div class="task-meta">
                            <span class="due-date @(task.DueDate < DateTime.Today && !task.IsCompleted ? "overdue" : "")">
                                <i class="far fa-calendar-alt"></i> 
                                @task.DueDate.ToString("MMM dd, yyyy hh:mm tt")
                            </span>
                            
                            <span class="task-status">
                                @if (task.IsCompleted)
                                {
                                    <span class="badge bg-success">
                                        <i class="fas fa-check"></i> Completed
                                    </span>
                                }
                                else if(task.DueDate < DateTime.Now)
                                {
                                    <span class="badge bg-danger text-dark">
                                        <i class="fas fa-clock"></i> Missed
                                    </span>
                                }
                                else
                                {
                                    <span class="badge bg-info text-dark">
                                        <i class="fas fa-clock"></i> Pending
                                    </span>
                                }
                            </span>
                        </div>
                        
                        <div class="task-actions">
                            <a href="/Home/Edit/@task.Id" class="btn btn-sm btn-outline-primary">
                                <i class="fas fa-edit"></i> Edit
                            </a>
                            <form asp-action="Delete" asp-route-id="@task.Id" method="post" class="d-inline">
                                <button type="submit" class="btn btn-sm btn-outline-danger" onclick="return confirm('Are you sure you want to delete this task?');">
                                    <i class="fas fa-trash"></i> Delete
                                </button>
                            </form>
                            <form asp-action="ToggleComplete" asp-route-id="@task.Id" method="post" class="d-inline">
                                <button type="submit" class="btn btn-sm @(task.IsCompleted ? "btn-outline-secondary" : "btn-outline-success")">
                                    @if (task.IsCompleted)
                                    {
                                        <i class="fas fa-undo"></i> <span>Reopen</span> 
                                    }
                                    else
                                    {
                                        <i class="fas fa-check"></i> <span>Complete</span>
                                    }
                                </button>
                            </form>
                        </div>
                    </div>
                }
            </div>
        }
    </div>
</div>

<style>
    .empty-state {
        padding: 40px 0;
        margin: 40px 0;
        background-color: #f8f9fa;
        border-radius: 10px;
    }
    
    .task-header {
        display: flex;
        justify-content: space-between;
        align-items: center;
        margin-bottom: 30px;
    }
    
    .task-list {
        display: grid;
        grid-template-columns: repeat(auto-fill, minmax(300px, 1fr));
        gap: 20px;
        margin-top: 20px;
    }
    
    .task-card {
        background: white;
        border-radius: 8px;
        padding: 20px;
        box-shadow: 0 2px 4px rgba(0,0,0,0.1);
        transition: transform 0.2s;
        display: flex;
        flex-direction: column;
        height: 100%;
    }
    
    .task-card:hover {
        transform: translateY(-3px);
        box-shadow: 0 4px 8px rgba(0,0,0,0.1);
    }
    
    .task-card.completed {
        opacity: 0.8;
        background-color: #f8f9fa;
    }
    
    .task-title {
        font-size: 1.2rem;
        margin-bottom: 10px;
        color: #333;
    }
    
    .task-card.completed .task-title {
        text-decoration: line-through;
        color: #6c757d;
    }
    
    .task-description {
        color: #6c757d;
        margin-bottom: 15px;
        flex-grow: 1;
    }
    
    .task-meta {
        display: flex;
        justify-content: space-between;
        align-items: center;
        margin-bottom: 15px;
        font-size: 0.9rem;
    }
    
    .due-date {
        color: #6c757d;
    }
    
    .due-date.overdue {
        color: #dc3545;
        font-weight: bold;
    }
    
    .task-actions {
        display: flex;
        gap: 8px;
        flex-wrap: wrap;
    }
    
    .badge {
        padding: 5px 10px;
        border-radius: 20px;
        font-size: 0.8rem;
    }
    
    @@media (max-width: 768px) {
        .task-header {
            flex-direction: column;
            align-items: flex-start;
            gap: 15px;
        }
        
        .task-list {
            grid-template-columns: 1fr;
        }
    }
</style>

@section Scripts {
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css">
}